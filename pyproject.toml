[tool.mypy]
strict = true
show_error_codes = true


[tool.ruff]
# Currently strings not shown to the user are quoted with single quotation marks.
line-length = 88

[tool.ruff.format]
quote-style = "preserve"

[tool.ruff.lint]
select = [
    "A", "ANN", "ARG", "ASYNC", "B", "BLE", "C4", "C90", "CPY", "D", "DTZ", "E", "EM", "ERA", "F", "FBT", "FIX", "FLY", "FURB", "G", "I", "ICN", "INP", "ISC", "LOG", "N", "PERF", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "S", "SIM", "SLF", "SLOT", "T10", "T20", "TID", "TD", "TRIO", "TRY", "UP", "W", "YTT",
    "COM818"  # Trailing comma on bare tuple prohibited
]
ignore = [
    "ANN101",  # Missing type annotation for {name} in method
    "ANN102",  # Missing type annotation for `cls` in classmethod
    "D105",  # Missing docstring in magic method
    "D107",  # Missing docstring in __init__  # Will write in class docstring
    "D212",  # Multi-line docstring summary should start at the first line
    "EM101",  # Exception must not use a string literal, assign to variable first
    "S101",  # Use of assert detected
    "RET504",  # Unnecessary assignment to `target` before `return` statement  # Using as comment
    "TID252",  # Relative imports from parent modules are banned

    # Not for pyqoolloop
    "AIR",  # Airflow
    "DJ",  #
    "EXE",  # flake8-executable
    "FA",  # flake8-future-annotations
    "INT",  # flake8-gettext
    "NPY",  # NumPy-specific rules
    "PD",  # pandas-vet

    # Not included in black
    "COM",  # flake8-commas

    # Not now
    "TD002",  # Missing author in TODO
    "TD003",  # Missing issue link on the line following this TODO
    "TRY003",  # Avoid specifying long messages outside the exception class

    # TODO: Think about whether to adopt these.
    "TRY300",  # Consider moving this statement to an `else` block

    # TODO: These were introduced with ruff. Want to fixed carefully.
    "C901",  # `__call__` is too complex (19 > 10)
    "EM102",  # Exception must not use an f-string literal, assign to variable first
    "G004",  # Logging statement uses f-string
    "N818",  # Exception name `AnException` should be named with an Error suffix
    "PERF203",  # `try`-`except` within a loop incurs performance overhead
    "PERF401",  # Use a list comprehension to create a transformed list
    "PLR2004",  # Magic value used in comparison
    "PLW2901",  # `for` loop variable `another` overwritten by assignment target
    "PT012",  # `pytest.raises()` block should contain a single simple statement
    "PTH",  # Use `Path`
    "SIM105",  # Use `contextlib.suppress(FileNotFoundError)` instead of `try`-`except`-`pass`
    "SIM108",  # Use ternary operator `is_in = _set_in if equals == eq_operator else _iterable_in` instead o..
    "SIM110",  # Use `return any(equals(each, other) for other in another_set)` instead of `for` loop
]

[tool.ruff.lint.extend-per-file-ignores]
"test_*.py" = [
    "N802",  # Function name {name} should be lowercase
]
"decorators.py" = [
    # Currently commenting out type hints, which mypy can't seem to handle
    "ERA001",  # Found commented-out code
]
"genericdecorator.py" = [
    # Currently commenting out type hints, which mypy can't seem to handle
    "ERA001",  # Found commented-out code
]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.flake8-pytest-style]
parametrize-names-type = "csv"
parametrize-values-type = "tuple"  # FUTURE: Will switch to `list`, because `combine_lists()` returns `list`.
mark-parentheses = false

[tool.ruff.lint.isort]
force-sort-within-sections = true

[tool.pytest.ini_options]
addopts = "--mypy --ruff --ruff-format --doctest-modules --strict-markers"
markers = [
    "unreliable: mark a test that doesn't always pass"
]
